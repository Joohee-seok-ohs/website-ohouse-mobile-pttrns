{"ast":null,"code":"const FIGMA_TOKEN = process.env.REACT_APP_FIGMA_TOKEN || ''; // .env에서 불러옴\nconst FILE_KEY = 'aBz95vVjLFS6gPUW21cMV3'; // Figma 파일 키\n\n// API 응답 캐시\nconst apiCache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5분\n\n// 캐시된 API 호출 함수\nasync function cachedFetch(url, options) {\n  const cacheKey = `${url}-${JSON.stringify(options)}`;\n  const cached = apiCache.get(cacheKey);\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    console.log('[Cache] Using cached response for:', url);\n    return cached.data;\n  }\n  const res = await fetch(url, options);\n  if (!res.ok) {\n    throw new Error(`API 호출 실패: ${res.status} ${res.statusText}`);\n  }\n  const data = await res.json();\n  apiCache.set(cacheKey, {\n    data,\n    timestamp: Date.now()\n  });\n  return data;\n}\nexport async function fetchFigmaFile() {\n  return cachedFetch(`https://api.figma.com/v1/files/${FILE_KEY}`, {\n    headers: {\n      'X-Figma-Token': FIGMA_TOKEN\n    }\n  });\n}\n\n// 메타데이터 파싱 유틸\nfunction parseMetadataText(text) {\n  var _text$match, _text$match$, _text$match2, _text$match2$;\n  const getField = label => {\n    const match = text.match(new RegExp(`${label}: (.*)`));\n    return match ? match[1].split(',').map(s => s.trim()).filter(Boolean) : [];\n  };\n  return {\n    appVersion: ((_text$match = text.match(/App Version: (.*)/)) === null || _text$match === void 0 ? void 0 : (_text$match$ = _text$match[1]) === null || _text$match$ === void 0 ? void 0 : _text$match$.trim()) || '',\n    screenType: getField('Screen Type'),\n    uiComponents: getField('UI Components'),\n    screenId: ((_text$match2 = text.match(/Screen ID: (.*)/)) === null || _text$match2 === void 0 ? void 0 : (_text$match2$ = _text$match2[1]) === null || _text$match2$ === void 0 ? void 0 : _text$match2$.trim()) || ''\n  };\n}\n\n// 재귀적으로 트리 탐색하여 #metadata-card- 프레임과 그 부모 프레임 추출\nfunction findMetadataCards(node, parent = null, result = []) {\n  if (node.type === 'FRAME' && node.name.startsWith('#metadata-card-')) {\n    result.push({\n      card: node,\n      parent\n    });\n  }\n  if (node.children) {\n    for (const child of node.children) {\n      findMetadataCards(child, node, result);\n    }\n  }\n  return result;\n}\n\n// 1. 메타데이터만 반환 (썸네일 X)\nexport async function fetchFramesMetadata() {\n  const fileData = await fetchFigmaFile();\n  const PAGE_NAME = '🏞️ 스샷 모음';\n  const pages = fileData.document.children;\n  const targetPage = pages.find(p => p.name === PAGE_NAME);\n  if (!targetPage) return [];\n  const cardPairs = findMetadataCards(targetPage);\n  const screens = [];\n  const seenIds = new Set();\n  for (const {\n    card,\n    parent\n  } of cardPairs) {\n    const textNode = (card.children || []).find(n => n.type === 'TEXT');\n    if (!textNode || !parent) continue;\n    if (parent.type !== 'FRAME' && parent.type !== 'COMPONENT') continue;\n    if (parent.removed || parent.visible === false) continue;\n    if (seenIds.has(parent.id)) continue;\n    seenIds.add(parent.id);\n    const text = textNode.characters || '';\n    const meta = parseMetadataText(text);\n    if (!parent.name || parent.name === '-' || parent.name.trim() === '') continue;\n    meta.screenType = (meta.screenType || []).filter(t => t && t !== '-' && t.trim() !== '');\n    meta.uiComponents = (meta.uiComponents || []).filter(t => t && t !== '-' && t.trim() !== '');\n    screens.push({\n      id: parent.id,\n      screenTitle: parent.name,\n      ...meta\n    });\n  }\n  return screens;\n}\n\n// 모든 태그(중복 없이) 추출\nexport function getAllTags(screens) {\n  const screenTypeSet = new Set();\n  const uiComponentsSet = new Set();\n  screens.forEach(screen => {\n    (screen.screenType || []).forEach(t => screenTypeSet.add(t));\n    (screen.uiComponents || []).forEach(t => uiComponentsSet.add(t));\n  });\n  return {\n    screenType: Array.from(screenTypeSet).filter(Boolean),\n    uiComponents: Array.from(uiComponentsSet).filter(Boolean)\n  };\n}\n\n// 2. 썸네일만 개별 fetch\nexport async function fetchThumbnail(frameId) {\n  const url = `https://api.figma.com/v1/images/${FILE_KEY}?ids=${frameId}&format=png`;\n  try {\n    var _data$images;\n    const data = await cachedFetch(url, {\n      headers: {\n        'X-Figma-Token': FIGMA_TOKEN\n      }\n    });\n    return ((_data$images = data.images) === null || _data$images === void 0 ? void 0 : _data$images[frameId]) || '';\n  } catch (e) {\n    console.error('[Error] 썸네일 fetch 실패:', e);\n    return '';\n  }\n}","map":{"version":3,"names":["FIGMA_TOKEN","process","env","REACT_APP_FIGMA_TOKEN","FILE_KEY","apiCache","Map","CACHE_DURATION","cachedFetch","url","options","cacheKey","JSON","stringify","cached","get","Date","now","timestamp","console","log","data","res","fetch","ok","Error","status","statusText","json","set","fetchFigmaFile","headers","parseMetadataText","text","_text$match","_text$match$","_text$match2","_text$match2$","getField","label","match","RegExp","split","map","s","trim","filter","Boolean","appVersion","screenType","uiComponents","screenId","findMetadataCards","node","parent","result","type","name","startsWith","push","card","children","child","fetchFramesMetadata","fileData","PAGE_NAME","pages","document","targetPage","find","p","cardPairs","screens","seenIds","Set","textNode","n","removed","visible","has","id","add","characters","meta","t","screenTitle","getAllTags","screenTypeSet","uiComponentsSet","forEach","screen","Array","from","fetchThumbnail","frameId","_data$images","images","e","error"],"sources":["/Users/jh.seok/석주희/개발/오늘의집/Joohee/website-ohouse-mobile-pttrns/src/api/figma.ts"],"sourcesContent":["const FIGMA_TOKEN = process.env.REACT_APP_FIGMA_TOKEN || ''; // .env에서 불러옴\nconst FILE_KEY = 'aBz95vVjLFS6gPUW21cMV3'; // Figma 파일 키\n\n// API 응답 캐시\nconst apiCache = new Map<string, { data: any; timestamp: number }>();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5분\n\n// 캐시된 API 호출 함수\nasync function cachedFetch(url: string, options: RequestInit) {\n  const cacheKey = `${url}-${JSON.stringify(options)}`;\n  const cached = apiCache.get(cacheKey);\n  \n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n    console.log('[Cache] Using cached response for:', url);\n    return cached.data;\n  }\n\n  const res = await fetch(url, options);\n  if (!res.ok) {\n    throw new Error(`API 호출 실패: ${res.status} ${res.statusText}`);\n  }\n  \n  const data = await res.json();\n  apiCache.set(cacheKey, { data, timestamp: Date.now() });\n  return data;\n}\n\nexport async function fetchFigmaFile() {\n  return cachedFetch(`https://api.figma.com/v1/files/${FILE_KEY}`, {\n    headers: {\n      'X-Figma-Token': FIGMA_TOKEN,\n    },\n  });\n}\n\n// 메타데이터 파싱 유틸\nfunction parseMetadataText(text: string) {\n  const getField = (label: string) => {\n    const match = text.match(new RegExp(`${label}: (.*)`));\n    return match ? match[1].split(',').map(s => s.trim()).filter(Boolean) : [];\n  };\n  return {\n    appVersion: text.match(/App Version: (.*)/)?.[1]?.trim() || '',\n    screenType: getField('Screen Type'),\n    uiComponents: getField('UI Components'),\n    screenId: text.match(/Screen ID: (.*)/)?.[1]?.trim() || '',\n  };\n}\n\n// 재귀적으로 트리 탐색하여 #metadata-card- 프레임과 그 부모 프레임 추출\nfunction findMetadataCards(node: any, parent: any = null, result: any[] = []) {\n  if (node.type === 'FRAME' && node.name.startsWith('#metadata-card-')) {\n    result.push({ card: node, parent });\n  }\n  if (node.children) {\n    for (const child of node.children) {\n      findMetadataCards(child, node, result);\n    }\n  }\n  return result;\n}\n\n// 1. 메타데이터만 반환 (썸네일 X)\nexport async function fetchFramesMetadata() {\n  const fileData = await fetchFigmaFile();\n  const PAGE_NAME = '🏞️ 스샷 모음';\n  const pages = fileData.document.children;\n  const targetPage = pages.find((p: any) => p.name === PAGE_NAME);\n  if (!targetPage) return [];\n  const cardPairs = findMetadataCards(targetPage);\n  const screens: any[] = [];\n  const seenIds = new Set();\n  for (const { card, parent } of cardPairs) {\n    const textNode = (card.children || []).find((n: any) => n.type === 'TEXT');\n    if (!textNode || !parent) continue;\n    if (parent.type !== 'FRAME' && parent.type !== 'COMPONENT') continue;\n    if (parent.removed || parent.visible === false) continue;\n    if (seenIds.has(parent.id)) continue;\n    seenIds.add(parent.id);\n    const text = textNode.characters || '';\n    const meta = parseMetadataText(text);\n    if (!parent.name || parent.name === '-' || parent.name.trim() === '') continue;\n    meta.screenType = (meta.screenType || []).filter((t: string) => t && t !== '-' && t.trim() !== '');\n    meta.uiComponents = (meta.uiComponents || []).filter((t: string) => t && t !== '-' && t.trim() !== '');\n    screens.push({\n      id: parent.id,\n      screenTitle: parent.name,\n      ...meta,\n    });\n  }\n  return screens;\n}\n\n// 모든 태그(중복 없이) 추출\nexport function getAllTags(screens: any[]) {\n  const screenTypeSet = new Set<string>();\n  const uiComponentsSet = new Set<string>();\n  screens.forEach(screen => {\n    (screen.screenType || []).forEach((t: string) => screenTypeSet.add(t));\n    (screen.uiComponents || []).forEach((t: string) => uiComponentsSet.add(t));\n  });\n  return {\n    screenType: Array.from(screenTypeSet).filter(Boolean),\n    uiComponents: Array.from(uiComponentsSet).filter(Boolean),\n  };\n}\n\n// 2. 썸네일만 개별 fetch\nexport async function fetchThumbnail(frameId: string): Promise<string> {\n  const url = `https://api.figma.com/v1/images/${FILE_KEY}?ids=${frameId}&format=png`;\n  try {\n    const data = await cachedFetch(url, {\n      headers: { 'X-Figma-Token': FIGMA_TOKEN },\n    });\n    return data.images?.[frameId] || '';\n  } catch (e) {\n    console.error('[Error] 썸네일 fetch 실패:', e);\n    return '';\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
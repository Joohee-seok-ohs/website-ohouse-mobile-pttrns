{"ast":null,"code":"var _jsxFileName = \"/Users/jh.seok/\\u1109\\u1165\\u11A8\\u110C\\u116E\\u1112\\u1174/\\u1100\\u1162\\u1107\\u1161\\u11AF/\\u110B\\u1169\\u1102\\u1173\\u11AF\\u110B\\u1174\\u110C\\u1175\\u11B8/Joohee/website-ohouse-mobile-pttrns/src/components/ScreenList.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { fetchThumbnail } from '../api/figma';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 썸네일 캐시 (메모리)\nconst thumbnailCache = new Map();\n// 썸네일 캐시 (localStorage)\nfunction getLocalCache(id) {\n  try {\n    return localStorage.getItem(`figma-thumb-${id}`) || '';\n  } catch {\n    return '';\n  }\n}\nfunction setLocalCache(id, url) {\n  try {\n    localStorage.setItem(`figma-thumb-${id}`, url);\n  } catch {}\n}\n\n// === 글로벌 썸네일 요청 큐 구현 ===\n\nconst thumbnailQueue = [];\nlet isProcessing = false;\nconst MAX_CONCURRENT = 8; // 동시 요청 수 상향\nlet currentConcurrent = 0;\nconst loadingSet = new Set(); // 로딩 중인 썸네일 id\n\n// batch로 5개씩 처리\nconst BATCH_SIZE = 5;\nasync function processThumbnailQueue() {\n  if (isProcessing) return;\n  isProcessing = true;\n  while (thumbnailQueue.length > 0) {\n    if (currentConcurrent >= MAX_CONCURRENT) {\n      await new Promise(r => setTimeout(r, 100));\n      continue;\n    }\n    // batch로 5개씩 처리\n    const batch = [];\n    while (batch.length < BATCH_SIZE && thumbnailQueue.length > 0) {\n      const task = thumbnailQueue.shift();\n      if (task && !loadingSet.has(task.id)) {\n        batch.push(task);\n        loadingSet.add(task.id);\n      }\n    }\n    if (batch.length === 0) {\n      await new Promise(r => setTimeout(r, 100));\n      continue;\n    }\n    currentConcurrent++;\n    Promise.all(batch.map(task => fetchThumbnailWithRetry(task.id, 0).then(url => {\n      task.onDone(url);\n    }).finally(() => {\n      loadingSet.delete(task.id);\n    }))).finally(() => {\n      currentConcurrent--;\n    });\n    await new Promise(r => setTimeout(r, 300)); // 각 batch 사이 300ms 딜레이\n  }\n  isProcessing = false;\n}\nasync function fetchThumbnailWithRetry(id, retry) {\n  // localStorage 캐시 우선\n  const local = getLocalCache(id);\n  if (local) return local;\n  try {\n    const url = await fetchThumbnail(id);\n    if (url) setLocalCache(id, url);\n    return url;\n  } catch (e) {\n    var _e$message;\n    if (e !== null && e !== void 0 && (_e$message = e.message) !== null && _e$message !== void 0 && _e$message.includes('429') && retry < 5) {\n      await new Promise(r => setTimeout(r, 3000)); // 3초 후 재시도, 최대 5회\n      return fetchThumbnailWithRetry(id, retry + 1);\n    }\n    return '';\n  }\n}\nfunction enqueueThumbnailRequest(id, onDone, priority = false) {\n  // 이미 큐에 있거나, 로딩 중이거나, 캐시에 있으면 skip\n  if (thumbnailQueue.find(t => t.id === id) || loadingSet.has(id) || thumbnailCache.has(id) || getLocalCache(id)) {\n    return;\n  }\n  const task = {\n    id,\n    onDone\n  };\n  if (priority) {\n    thumbnailQueue.unshift(task); // 우선순위: 맨 앞에 넣음\n  } else {\n    thumbnailQueue.push(task);\n  }\n  processThumbnailQueue();\n}\n// === 글로벌 썸네일 요청 큐 끝 ===\n\nconst ScreenList = ({\n  screens\n}) => {\n  _s();\n  // 각 카드별 썸네일 상태 관리\n  const [thumbnails, setThumbnails] = useState({});\n  const [visibleScreens, setVisibleScreens] = useState(new Set());\n  const observerRef = useRef(null);\n  useEffect(() => {\n    // Intersection Observer 설정\n    observerRef.current = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        const screenId = entry.target.getAttribute('data-screen-id');\n        if (screenId) {\n          setVisibleScreens(prev => {\n            const next = new Set(prev);\n            if (entry.isIntersecting) {\n              next.add(screenId);\n            } else {\n              next.delete(screenId);\n            }\n            return next;\n          });\n        }\n      });\n    }, {\n      rootMargin: '1200px 0px',\n      // 더 미리 큐에 넣기\n      threshold: 0.1\n    });\n\n    // 모든 카드에 observer 연결\n    const cards = document.querySelectorAll('.screen-card');\n    cards.forEach(card => {\n      var _observerRef$current;\n      return (_observerRef$current = observerRef.current) === null || _observerRef$current === void 0 ? void 0 : _observerRef$current.observe(card);\n    });\n    return () => {\n      var _observerRef$current2;\n      (_observerRef$current2 = observerRef.current) === null || _observerRef$current2 === void 0 ? void 0 : _observerRef$current2.disconnect();\n    };\n  }, [screens]);\n\n  // 화면에 보이는 썸네일을 항상 우선적으로 큐에 넣음\n  useEffect(() => {\n    // visibleScreens를 Array로 변환(위에서 아래 순서)\n    const visibleArr = Array.from(visibleScreens);\n    visibleArr.forEach(screenId => {\n      if (thumbnails[screenId] || thumbnailCache.has(screenId) || getLocalCache(screenId)) return;\n      enqueueThumbnailRequest(screenId, url => {\n        if (url) {\n          thumbnailCache.set(screenId, url);\n          setThumbnails(prev => ({\n            ...prev,\n            [screenId]: url\n          }));\n        }\n      }, true); // priority: true (맨 앞에 넣음)\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visibleScreens, screens]);\n\n  // 최초 마운트 시 localStorage 캐시 반영\n  useEffect(() => {\n    const cacheObj = {};\n    screens.forEach(screen => {\n      const local = getLocalCache(screen.id);\n      if (local) {\n        thumbnailCache.set(screen.id, local);\n        cacheObj[screen.id] = local;\n      }\n    });\n    if (Object.keys(cacheObj).length > 0) {\n      setThumbnails(prev => ({\n        ...prev,\n        ...cacheObj\n      }));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [screens]);\n  return /*#__PURE__*/_jsxDEV(ResultsContainer, {\n    children: screens.map(screen => {\n      const imgSrc = thumbnailCache.get(screen.id) || thumbnails[screen.id] || getLocalCache(screen.id) || '';\n      return /*#__PURE__*/_jsxDEV(Card, {\n        className: \"screen-card\",\n        \"data-screen-id\": screen.id,\n        children: [/*#__PURE__*/_jsxDEV(ImageWrapper, {\n          children: imgSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imgSrc,\n            alt: screen.screenTitle,\n            crossOrigin: \"anonymous\",\n            loading: \"lazy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(SkeletonImage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: screen.screenTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)]\n      }, screen.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(ScreenList, \"QnsUxyD/PN/v3Zxo3YlUnqFH1Ts=\");\n_c = ScreenList;\nconst ResultsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 16px;\n  justify-content: start;\n  margin-top: 8px;\n  margin-bottom: 40px;\n  padding-left: 40px;\n  padding-right: 40px;\n`;\n_c2 = ResultsContainer;\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  cursor: pointer;\n  margin-bottom: 12px;\n`;\n_c3 = Card;\nconst ImageWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  aspect-ratio: 375 / 812;\n  background: #fafafa;\n  border-radius: 10px;\n  overflow: hidden;\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    border: 1px solid #eee;\n    border-radius: 10px;\n    background: #fafafa;\n    transition: box-shadow 0.2s;\n  }\n  img:hover {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  }\n`;\n_c4 = ImageWrapper;\nconst SkeletonImage = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    #f0f0f0 25%,\n    #e0e0e0 50%,\n    #f0f0f0 75%\n  );\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite;\n  border-radius: 10px;\n\n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n`;\n_c5 = SkeletonImage;\nexport default ScreenList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"ScreenList\");\n$RefreshReg$(_c2, \"ResultsContainer\");\n$RefreshReg$(_c3, \"Card\");\n$RefreshReg$(_c4, \"ImageWrapper\");\n$RefreshReg$(_c5, \"SkeletonImage\");","map":{"version":3,"names":["useEffect","useRef","useState","styled","fetchThumbnail","jsxDEV","_jsxDEV","thumbnailCache","Map","getLocalCache","id","localStorage","getItem","setLocalCache","url","setItem","thumbnailQueue","isProcessing","MAX_CONCURRENT","currentConcurrent","loadingSet","Set","BATCH_SIZE","processThumbnailQueue","length","Promise","r","setTimeout","batch","task","shift","has","push","add","all","map","fetchThumbnailWithRetry","then","onDone","finally","delete","retry","local","e","_e$message","message","includes","enqueueThumbnailRequest","priority","find","t","unshift","ScreenList","screens","_s","thumbnails","setThumbnails","visibleScreens","setVisibleScreens","observerRef","current","IntersectionObserver","entries","forEach","entry","screenId","target","getAttribute","prev","next","isIntersecting","rootMargin","threshold","cards","document","querySelectorAll","card","_observerRef$current","observe","_observerRef$current2","disconnect","visibleArr","Array","from","set","cacheObj","screen","Object","keys","ResultsContainer","children","imgSrc","get","Card","className","ImageWrapper","src","alt","screenTitle","crossOrigin","loading","fileName","_jsxFileName","lineNumber","columnNumber","SkeletonImage","_c","div","_c2","_c3","_c4","_c5","$RefreshReg$"],"sources":["/Users/jh.seok/석주희/개발/오늘의집/Joohee/website-ohouse-mobile-pttrns/src/components/ScreenList.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { fetchThumbnail } from '../api/figma';\n\ninterface ScreenListProps {\n  screens: {\n    id: string;\n    screenTitle: string;\n    // thumbnail?: string; // 이제 prop에서 안 받음\n  }[];\n}\n\n// 썸네일 캐시 (메모리)\nconst thumbnailCache = new Map<string, string>();\n// 썸네일 캐시 (localStorage)\nfunction getLocalCache(id: string) {\n  try {\n    return localStorage.getItem(`figma-thumb-${id}`) || '';\n  } catch { return ''; }\n}\nfunction setLocalCache(id: string, url: string) {\n  try {\n    localStorage.setItem(`figma-thumb-${id}`, url);\n  } catch {}\n}\n\n// === 글로벌 썸네일 요청 큐 구현 ===\ntype ThumbnailTask = {\n  id: string;\n  onDone: (url: string) => void;\n};\n\nconst thumbnailQueue: ThumbnailTask[] = [];\nlet isProcessing = false;\nconst MAX_CONCURRENT = 8; // 동시 요청 수 상향\nlet currentConcurrent = 0;\nconst loadingSet = new Set<string>(); // 로딩 중인 썸네일 id\n\n// batch로 5개씩 처리\nconst BATCH_SIZE = 5;\n\nasync function processThumbnailQueue() {\n  if (isProcessing) return;\n  isProcessing = true;\n  while (thumbnailQueue.length > 0) {\n    if (currentConcurrent >= MAX_CONCURRENT) {\n      await new Promise((r) => setTimeout(r, 100));\n      continue;\n    }\n    // batch로 5개씩 처리\n    const batch = [];\n    while (batch.length < BATCH_SIZE && thumbnailQueue.length > 0) {\n      const task = thumbnailQueue.shift();\n      if (task && !loadingSet.has(task.id)) {\n        batch.push(task);\n        loadingSet.add(task.id);\n      }\n    }\n    if (batch.length === 0) {\n      await new Promise((r) => setTimeout(r, 100));\n      continue;\n    }\n    currentConcurrent++;\n    Promise.all(\n      batch.map(task => fetchThumbnailWithRetry(task.id, 0)\n        .then((url) => {\n          task.onDone(url);\n        })\n        .finally(() => {\n          loadingSet.delete(task.id);\n        })\n      )\n    ).finally(() => {\n      currentConcurrent--;\n    });\n    await new Promise((r) => setTimeout(r, 300)); // 각 batch 사이 300ms 딜레이\n  }\n  isProcessing = false;\n}\n\nasync function fetchThumbnailWithRetry(id: string, retry: number): Promise<string> {\n  // localStorage 캐시 우선\n  const local = getLocalCache(id);\n  if (local) return local;\n  try {\n    const url = await fetchThumbnail(id);\n    if (url) setLocalCache(id, url);\n    return url;\n  } catch (e: any) {\n    if (e?.message?.includes('429') && retry < 5) {\n      await new Promise((r) => setTimeout(r, 3000)); // 3초 후 재시도, 최대 5회\n      return fetchThumbnailWithRetry(id, retry + 1);\n    }\n    return '';\n  }\n}\n\nfunction enqueueThumbnailRequest(id: string, onDone: (url: string) => void, priority = false) {\n  // 이미 큐에 있거나, 로딩 중이거나, 캐시에 있으면 skip\n  if (\n    thumbnailQueue.find((t) => t.id === id) ||\n    loadingSet.has(id) ||\n    thumbnailCache.has(id) ||\n    getLocalCache(id)\n  ) {\n    return;\n  }\n  const task = { id, onDone };\n  if (priority) {\n    thumbnailQueue.unshift(task); // 우선순위: 맨 앞에 넣음\n  } else {\n    thumbnailQueue.push(task);\n  }\n  processThumbnailQueue();\n}\n// === 글로벌 썸네일 요청 큐 끝 ===\n\nconst ScreenList = ({ screens }: ScreenListProps) => {\n  // 각 카드별 썸네일 상태 관리\n  const [thumbnails, setThumbnails] = useState<Record<string, string>>({});\n  const [visibleScreens, setVisibleScreens] = useState<Set<string>>(new Set());\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  useEffect(() => {\n    // Intersection Observer 설정\n    observerRef.current = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          const screenId = entry.target.getAttribute('data-screen-id');\n          if (screenId) {\n            setVisibleScreens((prev) => {\n              const next = new Set(prev);\n              if (entry.isIntersecting) {\n                next.add(screenId);\n              } else {\n                next.delete(screenId);\n              }\n              return next;\n            });\n          }\n        });\n      },\n      {\n        rootMargin: '1200px 0px', // 더 미리 큐에 넣기\n        threshold: 0.1,\n      }\n    );\n\n    // 모든 카드에 observer 연결\n    const cards = document.querySelectorAll('.screen-card');\n    cards.forEach((card) => observerRef.current?.observe(card));\n\n    return () => {\n      observerRef.current?.disconnect();\n    };\n  }, [screens]);\n\n  // 화면에 보이는 썸네일을 항상 우선적으로 큐에 넣음\n  useEffect(() => {\n    // visibleScreens를 Array로 변환(위에서 아래 순서)\n    const visibleArr = Array.from(visibleScreens);\n    visibleArr.forEach((screenId) => {\n      if (thumbnails[screenId] || thumbnailCache.has(screenId) || getLocalCache(screenId)) return;\n      enqueueThumbnailRequest(screenId, (url) => {\n        if (url) {\n          thumbnailCache.set(screenId, url);\n          setThumbnails((prev) => ({ ...prev, [screenId]: url }));\n        }\n      }, true); // priority: true (맨 앞에 넣음)\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visibleScreens, screens]);\n\n  // 최초 마운트 시 localStorage 캐시 반영\n  useEffect(() => {\n    const cacheObj: Record<string, string> = {};\n    screens.forEach((screen) => {\n      const local = getLocalCache(screen.id);\n      if (local) {\n        thumbnailCache.set(screen.id, local);\n        cacheObj[screen.id] = local;\n      }\n    });\n    if (Object.keys(cacheObj).length > 0) {\n      setThumbnails((prev) => ({ ...prev, ...cacheObj }));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [screens]);\n\n  return (\n    <ResultsContainer>\n      {screens.map(screen => {\n        const imgSrc = thumbnailCache.get(screen.id) || thumbnails[screen.id] || getLocalCache(screen.id) || '';\n        return (\n          <Card \n            key={screen.id} \n            className=\"screen-card\"\n            data-screen-id={screen.id}\n          >\n            <ImageWrapper>\n              {imgSrc ? (\n                <img \n                  src={imgSrc} \n                  alt={screen.screenTitle} \n                  crossOrigin=\"anonymous\"\n                  loading=\"lazy\"\n                />\n              ) : (\n                <SkeletonImage />\n              )}\n            </ImageWrapper>\n            <div className=\"card-title\">{screen.screenTitle}</div>\n          </Card>\n        );\n      })}\n    </ResultsContainer>\n  );\n};\n\nconst ResultsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 16px;\n  justify-content: start;\n  margin-top: 8px;\n  margin-bottom: 40px;\n  padding-left: 40px;\n  padding-right: 40px;\n`;\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  cursor: pointer;\n  margin-bottom: 12px;\n`;\n\nconst ImageWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  aspect-ratio: 375 / 812;\n  background: #fafafa;\n  border-radius: 10px;\n  overflow: hidden;\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    border: 1px solid #eee;\n    border-radius: 10px;\n    background: #fafafa;\n    transition: box-shadow 0.2s;\n  }\n  img:hover {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  }\n`;\n\nconst SkeletonImage = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    #f0f0f0 25%,\n    #e0e0e0 50%,\n    #f0f0f0 75%\n  );\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite;\n  border-radius: 10px;\n\n  @keyframes shimmer {\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  }\n`;\n\nexport default ScreenList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}